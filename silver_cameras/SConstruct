#!/bin/env python

import sys
sys.path.insert(0, '../common')
from sconsUtilities import *

from string import split
from os.path import abspath

build_optional_flags = []

boost_libs = RelatedLibs('Boost',
                         'boost',
                         ['boost_filesystem',
                          'boost_program_options',
                          'boost_thread',
                          'boost_serialization'])

artkp_libs = RelatedLibs('ARToolKitPlus',
                         'artkp',
                         ['ARToolKitPlus'])

opencv_libs = RelatedLibs('OpenCv',
                          'opencv',
                          ['cv', 'highgui'])

mandatory_libs = RelatedLibsGroup([boost_libs,
                                   artkp_libs,
                                   opencv_libs])

opts = Options()

if False: #env['PLATFORM'] == 'win32':
    pass
#     opts.AddOptions(PathOption('prefix',
#                                'Installation prefix',
#                                'C:\\\\Syx', PathOption.PathAccept))
#     env['bindir'] = env['datadir'] = env['rootdir'] = env['libdir'] = '$prefix'
#     env['plugindir'] = '$prefix\\\\lib'
#     env['imagepath'] = '$prefix\\\\default.sim'
#     env['includedir'] = '$prefix\\\\include'
#     env['docdir'] = '$prefix\\\\doc'
else:
    opts.AddOptions(
        PathOption('prefix',
                   'Installation prefix',
                   '/usr/local', PathOption.PathAccept),
        PathOption('exec_prefix',
                   'Installation prefix for executables and object code libraries',
                   '$prefix', PathOption.PathAccept),
        PathOption('bindir',
                   'Installation prefix for user executables',
                   '$exec_prefix/bin', PathOption.PathAccept),
        PathOption('datadir',
                   'Installation prefix for machine-independent data',
                   '$prefix/share', PathOption.PathAccept),
        PathOption('rootdir',
                   'Installation prefix for all smalltalk data',
                   '$datadir/syx', PathOption.PathAccept),
        PathOption('imagepath',
                   'Installation path for the default binary image',
                   '$rootdir/default.sim', PathOption.PathAccept),
        PathOption('docdir',
                   'Installation prefix for documentation',
                   '$datadir/doc', PathOption.PathAccept),
        PathOption('libdir',
                   'Installation prefix for object code libraries',
                   '$exec_prefix/lib', PathOption.PathAccept),
        PathOption('plugindir',
                   'Installation prefix for object code plugins',
                   '$libdir/syx', PathOption.PathAccept),
        PathOption('includedir',
                   'Installation prefix for C header files',
                   '$prefix/include', PathOption.PathAccept),
        BoolOption('enable_libdc1394',
                   'Enable or disable the library dc1394',
                   True),
        EnumOption('libdc1394_version',
                   'Look for this version of dc1394 library','any',
                   allowed_values=('any', '1', '2')))

    for related_libs in mandatory_libs:
        opts.Add('lib_' + related_libs.short_name + '_suffix',
                 'Suffix of ' + related_libs.long_name + ' libraries.',
                 '')

    opts.Add('CPPPATH',
             'Directories that the C++ preprocessor will search for '
             'include directories. List only directories, do not list '
             'options flags like -I in gcc. Multiples directories must be '
             'quoted and delimited by a semicolon',
             '')

    opts.Add('LIBPATH',
             'The list of directories that will be searched for libraries. '
             'List only directories, do not list options flags like -L in '
             'gcc. Multiples directories must be quoted and delimited by '
             'a semicolon',
             '')

    opts.Add('CPPFLAGS',
             'C++ preprocessor flags',
             '')

env = Environment(options = opts,
                  CPPFLAGS = '${CPPFLAGS}')

for related_libs in mandatory_libs:
    related_libs.add_suffix(env['lib_' + related_libs.short_name + '_suffix'])

env['CPPPATH'] = env['CPPPATH'].split(';')
env.Append(CPPPATH = [abspath('../common')])

env['LIBPATH'] = env['LIBPATH'].split(';')

env.ParseConfig("pkg-config lua5.1 --cflags --libs")

Help(opts.GenerateHelpText(env))

if env.GetOption('clean'):
    build_optional_flags.append('cleaning')

if not env.GetOption('clean') and not env.GetOption('help'):
#=======================================================
#==== System Configuration
#=======================================================
    conf = Configure(env)

    supported_cameras = ['Pseudocamera']
#-------------------------------------------------------
    print '\n' + 'Mandatory libraries...'
#-------------------------------------------------------
    for related_libs in mandatory_libs:
        for lib in related_libs:
            if not conf.CheckLib(lib):
                print 'Did not find', lib, 'library'
                exit(1)

#-------------------------------------------------------
    print '\n' + 'Optional libraries...'
#-------------------------------------------------------
    if env['enable_libdc1394']:
        lib_header_dc1394 = []
        if env['libdc1394_version'] in ['1', 'any']:
            lib_header_dc1394.append(['dc1394_control',
                                      'libdc1394/dc1394_control.h'])
        if env['libdc1394_version'] in ['2', 'any']:
            lib_header_dc1394.append(['dc1394', 'dc1394/dc1394.h'])

        for [lib, header] in lib_header_dc1394:
            have_library = conf.CheckLib(lib)
            have_header = conf.CheckCXXHeader(header)
            if have_library and have_header:
                makeHeaderDefine(env, header)
                build_optional_flags.append(lib)
                supported_cameras.append('Cameras conform to the IEEE ' +\
                                             '1394-based Digital Camera Specification')
                break
            elif not have_library and env['libdc1394_version'] != 'any':
                print 'Did not find the libdc1394 in version',
                print env['libdc1394_version']
                exit(1)
            elif not have_header and env['libdc1394_version'] != 'any':
                print 'Did not find the headers of libdc1394 in version',
                print env['libdc1394_version']
                exit(1)

#-------------------------------------------------------
    print '\n' + 'Mandatory headers...'
#-------------------------------------------------------

    headers = ['ARToolKitPlus/TrackerSingleMarker.h',
               'ARToolKitPlus/TrackerSingleMarkerImpl.h',
               'boost/algorithm/string.hpp',
               'boost/archive/text_iarchive.hpp',
               'boost/archive/text_oarchive.hpp',
               'boost/array.hpp',
               'boost/asio.hpp',
               'boost/bind.hpp',
               'boost/foreach.hpp',
               'boost/lexical_cast.hpp',
               'boost/noncopyable.hpp',
               'boost/program_options.hpp',
               'boost/ref.hpp',
               'boost/scoped_ptr.hpp',
               'boost/serialization/variant.hpp',
               'boost/shared_ptr.hpp',
               'boost/thread/mutex.hpp',
               'boost/thread/once.hpp',
               'boost/thread/thread.hpp',
               'boost/tokenizer.hpp',
               'boost/tuple/tuple.hpp',
               'boost/variant.hpp',
               'opencv/cv.h',
               'opencv/highgui.h']

    for header in headers:
        if not conf.CheckCXXHeader(header):
            print 'Did not find the', header, 'header.'
            exit(1)

    print
    print 'Supported cameras:'
    for camera in supported_cameras:
        print '  * ' + camera
    print

    env = conf.Finish()


Export('env', 'opts', 'build_optional_flags')
SConscript('src/SConscript', build_dir='build', duplicate=0)
