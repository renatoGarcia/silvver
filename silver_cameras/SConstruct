#!/bin/env python

from string import maketrans
from os.path import abspath

def makeHeaderDefine(environment, header_path):
    header_path = '-DHAVE_' + \
                  header_path.translate(maketrans('/.','__')).upper()
    environment.Append(CXXFLAGS = header_path)


env = Environment(CPPPATH = [abspath('../common')])

opts = Options()

if env['PLATFORM'] == 'win32':
    opts.AddOptions(PathOption('prefix',
                               'Installation prefix',
                               'C:\\\\Syx', PathOption.PathAccept))
    env['bindir'] = env['datadir'] = env['rootdir'] = env['libdir'] = '$prefix'
    env['plugindir'] = '$prefix\\\\lib'
    env['imagepath'] = '$prefix\\\\default.sim'
    env['includedir'] = '$prefix\\\\include'
    env['docdir'] = '$prefix\\\\doc'
else:
    opts.AddOptions(
        PathOption('prefix',
                   'Installation prefix',
                   '/usr/local', PathOption.PathAccept),
        PathOption('exec_prefix',
                   'Installation prefix for executables and object code libraries',
                   '$prefix', PathOption.PathAccept),
        PathOption('bindir',
                   'Installation prefix for user executables',
                   '$exec_prefix/bin', PathOption.PathAccept),
        PathOption('datadir',
                   'Installation prefix for machine-independent data',
                   '$prefix/share', PathOption.PathAccept),
        PathOption('rootdir',
                   'Installation prefix for all smalltalk data',
                   '$datadir/syx', PathOption.PathAccept),
        PathOption('imagepath',
                   'Installation path for the default binary image',
                   '$rootdir/default.sim', PathOption.PathAccept),
        PathOption('docdir',
                   'Installation prefix for documentation',
                   '$datadir/doc', PathOption.PathAccept),
        PathOption('libdir',
                   'Installation prefix for object code libraries',
                   '$exec_prefix/lib', PathOption.PathAccept),
        PathOption('plugindir',
                   'Installation prefix for object code plugins',
                   '$libdir/syx', PathOption.PathAccept),
        PathOption('includedir',
                   'Installation prefix for C header files',
                   '$prefix/include', PathOption.PathAccept),
        BoolOption('enable_libdc1394',
                   'Enable or disable the library dc1394',
                   True),
        EnumOption('libdc1394_version',
                   'Look for this version of dc1394 library','any',
                   allowed_values=('any', '1', '2')))

opts.Update (env)
Help(opts.GenerateHelpText(env))

#=======================================================
#==== System Configuration
#=======================================================

conf = Configure(env)

supported_cameras = ['Pseudocamera']
build_optional_flags = []
#-------------------------------------------------------
print '\n' + 'Mandatory libraries...'
#-------------------------------------------------------
lib_headers = [['ARToolKitPlus', 'ARToolKitPlus/TrackerSingleMarker.h', 'CXX'],
               ['cv', 'opencv/cv.h', 'C'],
               ['highgui', 'opencv/highgui.h', 'C'],
               ['boost_filesystem', 'boost/filesystem.hpp', 'CXX'],
               ['boost_program_options', 'boost/program_options.hpp', 'CXX'],
               ['boost_thread', 'boost/thread/thread.hpp', 'CXX'],
               ['boost_serialization', 'boost/serialization/serialization.hpp', 'CXX']]

for [lib, header, language] in lib_headers:
    if not conf.CheckLibWithHeader(lib, header, language):
        print 'Did not find', lib, 'library'
        exit(1)

#-------------------------------------------------------
print '\n' + 'Optional libraries...'
#-------------------------------------------------------
if env['enable_libdc1394']:
    lib_header_dc1394 = []
    if env['libdc1394_version'] in ['1', 'any']:
        lib_header_dc1394.append(['dc1394_control',
                                  'libdc1394/dc1394_control.h', 'C'])
    if env['libdc1394_version'] in ['2', 'any']:
        lib_header_dc1394.append(['dc1394', 'dc1394/dc1394.h', 'C'])

    for [lib, header, language] in lib_header_dc1394:
        if conf.CheckLibWithHeader(lib, header, language):
            makeHeaderDefine(env, header)
            build_optional_flags.append(lib)
            supported_cameras.append('Cameras conform to the IEEE ' +\
                                     '1394-based Digital Camera Specification')
            break

#-------------------------------------------------------
print '\n' + 'Mandatory headers...'
#-------------------------------------------------------
if env['PLATFORM'] == 'win32':
    net_headers = [['winsock2.h', 'C']]
    for [header, lang] in net_headers:
        if not conf.CheckHeader(header, language=lang):
            print 'Did not find the', header, 'header.'
            exit(1)
    env.Append(CXXFLAGS = '-DHAVE_WINDOWS_SOCKETS')

else:
    net_headers = [['sys/socket.h', 'C'],
                   ['netdb.h', 'C'],
                   ['netinet/in.h', 'C'],
                   ['arpa/inet.h', 'C']]
    for [header, lang] in net_headers:
        if not conf.CheckHeader(header, language=lang):
            print 'Did not find the', header, 'header.'
            exit(1)
    env.Append(CXXFLAGS = '-DHAVE_LINUX_SOCKETS')

    heards = [['sys/timeb.h', 'C'],
              ['time.h', 'C']]
    for [header, lang] in net_headers:
        if not conf.CheckHeader(header, language=lang):
            print 'Did not find the', header, 'header.'
            exit(1)

print
print 'Supported cameras:'
for camera in supported_cameras:
    print '  * ' + camera
print

env = conf.Finish()

Export('env', 'opts', 'build_optional_flags')
SConscript('src/SConscript', build_dir='build', duplicate=0)
