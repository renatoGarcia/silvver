#!/bin/env python

from string import maketrans
from os.path import abspath

def makeHeaderDefine(environment, header_path):
    header_path = '-DHAVE_' + \
                  header_path.translate(maketrans('/.','__')).upper()
    environment.Append(CXXFLAGS = header_path)


opts = Options()

if False: #env['PLATFORM'] == 'win32':
    pass
#     opts.AddOptions(PathOption('prefix',
#                                'Installation prefix',
#                                'C:\\\\Syx', PathOption.PathAccept))
#     env['bindir'] = env['datadir'] = env['rootdir'] = env['libdir'] = '$prefix'
#     env['plugindir'] = '$prefix\\\\lib'
#     env['imagepath'] = '$prefix\\\\default.sim'
#     env['includedir'] = '$prefix\\\\include'
#     env['docdir'] = '$prefix\\\\doc'
else:
    opts.AddOptions(
        PathOption('prefix',
                   'Installation prefix',
                   '/usr/local', PathOption.PathAccept),
        PathOption('exec_prefix',
                   'Installation prefix for executables and object code libraries',
                   '$prefix', PathOption.PathAccept),
        PathOption('bindir',
                   'Installation prefix for user executables',
                   '$exec_prefix/bin', PathOption.PathAccept),
        PathOption('datadir',
                   'Installation prefix for machine-independent data',
                   '$prefix/share', PathOption.PathAccept),
        PathOption('rootdir',
                   'Installation prefix for all smalltalk data',
                   '$datadir/syx', PathOption.PathAccept),
        PathOption('imagepath',
                   'Installation path for the default binary image',
                   '$rootdir/default.sim', PathOption.PathAccept),
        PathOption('docdir',
                   'Installation prefix for documentation',
                   '$datadir/doc', PathOption.PathAccept),
        PathOption('libdir',
                   'Installation prefix for object code libraries',
                   '$exec_prefix/lib', PathOption.PathAccept),
        PathOption('plugindir',
                   'Installation prefix for object code plugins',
                   '$libdir/syx', PathOption.PathAccept),
        PathOption('includedir',
                   'Installation prefix for C header files',
                   '$prefix/include', PathOption.PathAccept),
        BoolOption('enable_libdc1394',
                   'Enable or disable the library dc1394',
                   True),
        EnumOption('libdc1394_version',
                   'Look for this version of dc1394 library','any',
                   allowed_values=('any', '1', '2')))

    opts.Add('CPPFLAGS',
             'C++ preprocessor flags, e.g. -I<include dir> if you '
             'have headers in a nonstandard directory <include dir>',
             '')

env = Environment(options = opts,
                  CPPPATH = [abspath('../common')],
                  CPPFLAGS = '${CPPFLAGS}')

opts.Update (env)
Help(opts.GenerateHelpText(env))

#=======================================================
#==== System Configuration
#=======================================================

conf = Configure(env)

supported_cameras = ['Pseudocamera']
build_optional_flags = []
#-------------------------------------------------------
print '\n' + 'Mandatory libraries...'
#-------------------------------------------------------
libraries = ['ARToolKitPlus',
             'cv',
             'highgui',
             'boost_filesystem',
             'boost_program_options',
             'boost_thread',
             'boost_serialization']

for lib in libraries:
    if not conf.CheckLib(lib):
        print 'Did not find', lib, 'library'
        exit(1)

#-------------------------------------------------------
print '\n' + 'Optional libraries...'
#-------------------------------------------------------
if env['enable_libdc1394']:
    lib_header_dc1394 = []
    if env['libdc1394_version'] in ['1', 'any']:
        lib_header_dc1394.append(['dc1394_control',
                                  'libdc1394/dc1394_control.h', 'C'])
    if env['libdc1394_version'] in ['2', 'any']:
        lib_header_dc1394.append(['dc1394', 'dc1394/dc1394.h', 'C'])

    for [lib, header, language] in lib_header_dc1394:
        if conf.CheckLibWithHeader(lib, header, language):
            makeHeaderDefine(env, header)
            build_optional_flags.append(lib)
            supported_cameras.append('Cameras conform to the IEEE ' +\
                                     '1394-based Digital Camera Specification')
            break
        elif env['libdc1394_version'] != 'any':
            print 'Did not find the libdc1394 in version',
            print env['libdc1394_version']
            exit(1)

#-------------------------------------------------------
print '\n' + 'Mandatory headers...'
#-------------------------------------------------------

headers = ['ARToolKitPlus/TrackerSingleMarker.h',
           'ARToolKitPlus/TrackerSingleMarkerImpl.h',
           'boost/algorithm/string.hpp',
           'boost/archive/text_iarchive.hpp',
           'boost/archive/text_oarchive.hpp',
           'boost/array.hpp',
           'boost/asio.hpp',
           'boost/bind.hpp',
           'boost/foreach.hpp',
           'boost/lexical_cast.hpp',
           'boost/noncopyable.hpp',
           'boost/program_options.hpp',
           'boost/ref.hpp',
           'boost/scoped_ptr.hpp',
           'boost/serialization/variant.hpp',
           'boost/shared_ptr.hpp',
           'boost/thread/mutex.hpp',
           'boost/thread/once.hpp',
           'boost/thread/thread.hpp',
           'boost/tokenizer.hpp',
           'boost/tuple/tuple.hpp',
           'boost/variant.hpp',
           'opencv/cv.h',
           'opencv/highgui.h']

for header in headers:
    if not conf.CheckCXXHeader(header):
        print 'Did not find the', header, 'header.'
        exit(1)

print
print 'Supported cameras:'
for camera in supported_cameras:
    print '  * ' + camera
print

env = conf.Finish()

Export('env', 'opts', 'build_optional_flags')
SConscript('src/SConscript', build_dir='build', duplicate=0)
