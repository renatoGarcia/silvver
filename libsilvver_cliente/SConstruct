#!/bin/env python

from os.path import abspath

env = Environment(CPPPATH = [abspath('../common')])

opts = Options()

if env['PLATFORM'] == 'win32':
    opts.AddOptions(PathOption('prefix',
                               'Installation prefix',
                               'C:\\\\Syx', PathOption.PathAccept))
    env['bindir'] = env['datadir'] = env['rootdir'] = env['libdir'] = '$prefix'
    env['includedir'] = '$prefix\\\\include'
    env['docdir'] = '$prefix\\\\doc'
else:
    opts.AddOptions(
        PathOption('prefix',
                   'Installation prefix',
                   '/usr/local', PathOption.PathAccept),
        PathOption('datadir',
                   'Installation prefix for machine-independent data',
                   '$prefix/share', PathOption.PathAccept),
        PathOption('docdir',
                   'Installation prefix for documentation',
                   '$datadir/doc', PathOption.PathAccept),
        PathOption('libdir',
                   'Installation prefix for object code libraries',
                   '$exec_prefix/lib', PathOption.PathAccept),
        PathOption('includedir',
                   'Installation prefix for C header files',
                   '$prefix/include', PathOption.PathAccept))

opts.Update (env)
Help(opts.GenerateHelpText(env))

#=======================================================
#==== System Configuration
#=======================================================

conf = Configure(env)
#-------------------------------------------------------
print '\n' + 'Mandatory libraries...'
#-------------------------------------------------------
lib_headers = [['boost_thread', 'boost/thread/thread.hpp', 'CXX']]

for [lib, header, language] in lib_headers:
    if not conf.CheckLibWithHeader(lib, header, language):
        print 'Did not find', lib, 'library'
        exit(1)

#-------------------------------------------------------
print '\n' + 'Mandatory headers...'
#-------------------------------------------------------
headers = [['boost/archive/text_iarchive.hpp', 'CXX'],
           ['boost/archive/text_oarchive.hpp', 'CXX'],
           ['boost/asio/buffer.hpp', 'CXX'],
           ['boost/asio/ip/tcp.hpp', 'CXX'],
           ['boost/asio/ip/udp.hpp', 'CXX'],
           ['boost/asio/placeholders.hpp', 'CXX'],
           ['boost/asio/read.hpp', 'CXX'],
           ['boost/asio/write.hpp', 'CXX'],
           ['boost/bind.hpp', 'CXX'],
           ['boost/lexical_cast.hpp', 'CXX'],
           ['boost/ref.hpp', 'CXX'],
           ['boost/scoped_ptr.hpp', 'CXX'],
           ['boost/thread/mutex.hpp', 'CXX'],
           ['boost/thread/once.hpp', 'CXX'],
           ['boost/thread/thread.hpp', 'CXX'],
           ['boost/tuple/tuple.hpp', 'CXX']]

for [header, lang] in headers:
    if not conf.CheckHeader(header, language=lang):
        print 'Did not find the', header, 'header.'
        exit(1)

print

env = conf.Finish()

Export('env', 'opts')
SConscript('./src/SConscript', build_dir='./build', duplicate=0)
