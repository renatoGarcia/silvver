#!/bin/env python

from os.path import abspath
from commands import getoutput

mandatory_libs = ['silver_client']

opts = Options()

opts.AddOptions(
    PathOption('prefix',
               'Installation prefix',
               '/usr/local', PathOption.PathAccept),
    PathOption('datadir',
               'Installation prefix for machine-independent data',
               '$prefix/share', PathOption.PathAccept),
    PathOption('docdir',
               'Installation prefix for documentation',
               '$datadir/doc', PathOption.PathAccept),
    PathOption('libdir',
               'Installation prefix for object code libraries',
               '$exec_prefix/lib', PathOption.PathAccept),
    PathOption('includedir',
               'Installation prefix for C header files',
               '$prefix/include', PathOption.PathAccept))

opts.Add('CPPPATH',
         'Directories that the C++ preprocessor will search for '
         'include directories. List only directories, do not list '
         'options flags like -I in gcc. Multiples directories must be '
         'quoted and delimited by a semicolon',
         '')

opts.Add('LIBPATH',
         'The list of directories that will be searched for libraries. '
         'List only directories, do not list options flags like -L in '
         'gcc. Multiples directories must be quoted and delimited by '
         'a semicolon',
         '')

opts.Add('CPPFLAGS',
         'C++ preprocessor flags',
         '')

env = Environment(options = opts,
                  CPPFLAGS = '${CPPFLAGS}')

env['CPPPATH'] = env['CPPPATH'].split(';')
env.Append(CPPPATH = [abspath('../common'),
                      abspath('../libsilver_client/src')])

env['LIBPATH'] = env['LIBPATH'].split(';')
env.Append(LIBPATH = [abspath('../libsilver_client/build')])

env.ParseConfig("pkg-config playercore --cflags --libs")
# env.ParseConfig("pkg-config silverclient --cflags --libs")

Help(opts.GenerateHelpText(env))

if not env.GetOption('clean') and not env.GetOption('help'):
#=======================================================
#==== System Configuration
#=======================================================

    conf = Configure(env)
#-------------------------------------------------------
    print '\n' + 'Mandatory libraries...'
#-------------------------------------------------------
    for lib in mandatory_libs:
        if not conf.CheckLib(lib):
            print 'Did not find', lib, 'library'
            exit(1)

#-------------------------------------------------------
    print '\n' + 'Mandatory headers...'
#-------------------------------------------------------
    headers = ['boost/archive/text_iarchive.hpp',
               'boost/archive/text_oarchive.hpp',
               'boost/asio/buffer.hpp',
               'boost/asio/ip/tcp.hpp',
               'boost/asio/ip/udp.hpp',
               'boost/asio/placeholders.hpp',
               'boost/asio/read.hpp',
               'boost/asio/write.hpp',
               'boost/bind.hpp',
               'boost/foreach.hpp',
               'boost/lexical_cast.hpp',
               'boost/ptr_container/ptr_vector.hpp',
               'boost/ref.hpp',
               'boost/scoped_ptr.hpp',
               'boost/thread/mutex.hpp',
               'boost/thread/once.hpp',
               'boost/thread/thread.hpp',
               'boost/tuple/tuple.hpp',
               'target.hpp',
               'libplayercore/playercore.h']

    for header in headers:
        if not conf.CheckCXXHeader(header):
            print 'Did not find the', header, 'header.'
            exit(1)

    print

    env = conf.Finish()

Export('env', 'opts')
SConscript('./src/SConscript', build_dir='./build', duplicate=0)
