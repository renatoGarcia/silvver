#!/bin/env python

from string import maketrans
from os.path import abspath

mandatory_libs = ['boost_program_options',
                  'boost_serialization',
                  'boost_system',
                  'boost_thread']

opts = Options()

if False: #env['PLATFORM'] == 'win32':
    pass
#     opts.AddOptions(PathOption('prefix',
#                                'Installation prefix',
#                                'C:\\\\Syx', PathOption.PathAccept))
#     env['bindir'] = env['datadir'] = env['rootdir'] = env['libdir'] = '$prefix'
#     env['plugindir'] = '$prefix\\\\lib'
#     env['imagepath'] = '$prefix\\\\default.sim'
#     env['includedir'] = '$prefix\\\\include'
#     env['docdir'] = '$prefix\\\\doc'
else:
    opts.AddOptions(
        PathOption('prefix',
                   'Installation prefix',
                   '/usr/local', PathOption.PathAccept),
        PathOption('bindir',
                   'Installation prefix for user executables',
                   '$exec_prefix/bin', PathOption.PathAccept),
        PathOption('datadir',
                   'Installation prefix for machine-independent data',
                   '$prefix/share', PathOption.PathAccept),
        PathOption('docdir',
                   'Installation prefix for documentation',
                   '$datadir/doc', PathOption.PathAccept),
        PathOption('includedir',
                   'Installation prefix for C header files',
                   '$prefix/include', PathOption.PathAccept))

    opts.Add('CPPPATH',
             'Directories that the C++ preprocessor will search for '
             'include directories. List only directories, do not list '
             'options flags like -I in gcc. Multiples directories must be '
             'quoted and delimited by a semicolon',
             '')

    opts.Add('LIBPATH',
             'The list of directories that will be searched for libraries. '
             'List only directories, do not list options flags like -L in '
             'gcc. Multiples directories must be quoted and delimited by '
             'a semicolon',
             '')

    opts.Add('CPPFLAGS',
             'C++ preprocessor flags',
             '')

env = Environment(options = opts,
                  CPPFLAGS = '${CPPFLAGS}')

env['CPPPATH'] = env['CPPPATH'].split(';')
env.Append(CPPPATH = [abspath('../common')])

env['LIBPATH'] = env['LIBPATH'].split(';')

Help(opts.GenerateHelpText(env))

if not env.GetOption('clean') and not env.GetOption('help'):
#=======================================================
#==== System Configuration
#=======================================================
    conf = Configure(env)
#-------------------------------------------------------
    print '\n' + 'Mandatory libraries...'
#-------------------------------------------------------
    for lib in mandatory_libs:
        if not conf.CheckLib(lib):
            print 'Did not find', lib, 'library'
            exit(1)

#-------------------------------------------------------
    print '\n' + 'Mandatory headers...'
#-------------------------------------------------------
    headers = ['boost/asio.hpp',
               'boost/bind.hpp',
               'boost/enable_shared_from_this.hpp',
               'boost/foreach.hpp',
               'boost/lexical_cast.hpp',
               'boost/program_options.hpp',
               'boost/ref.hpp',
               'boost/scoped_ptr.hpp',
               'boost/shared_ptr.hpp',
               'boost/thread.hpp',
               'boost/thread/mutex.hpp',
               'boost/thread/thread.hpp',
               'boost/tuple/tuple.hpp',
               'math.h']

    for header in headers:
        if not conf.CheckCXXHeader(header):
            print 'Did not find the', header, 'header.'
            exit(1)

    print

    env = conf.Finish()

Export('env', 'opts')
SConscript('src/SConscript', build_dir='build', duplicate=0)
