#!/usr/bin/env python
#
# Copyright 2009 Renato Florentino Garcia <fgar.renato@gmail.com>,
#                Daniel Balbino
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from optparse import OptionParser
from opencv.cv import *
from opencv.highgui import *
import sys
from glob import glob

class ImagesSource:
    def __init__(self, image_files):
        self._images_path = image_files
        img = cvLoadImage(self._images_path[0], CV_LOAD_IMAGE_COLOR)
        self._images_size = (img.width, img.height)

    def get_images(self):
        for path in self._images_path:
            if path.endswith(('.jpg', '.ppm', '.png')):
                yield cvLoadImage(path, CV_LOAD_IMAGE_COLOR)

    def n_images(self):
        return len(self._images_path)

    def images_cvSize(self):
        return (cvSize(self._images_size[0], self._images_size[1]))

description = "Receive a series of images with a checkerboard as input, and outputs the intrinsic calibration of camera which grab that images."
usage="%prog [options] board_width board_height square_width input_files..."
parser = OptionParser(usage=usage, description=description,
                      version="%prog 0.1")
parser.add_option("-i", "--show-images", action="store_true",
                  dest="show_images", default=False,
                  help="Show images when finding corners on input, and\
                        compare the distorted images with the undistorted.")
parser.add_option("-x", "--save-xml", action="store_true",
                  dest="save_xml", default=False,
                  help="Save an opencv xml for distortion and intrinsic\
                        values.")
parser.add_option("-m", "--maximum", type="int", dest="max_boards",
                  help="How many boards will be analyzed")

(options, args) = parser.parse_args()

# Number of internal corners
board_sz = cvSize(int(args[0])-1, int(args[1])-1)

# Number of corners in a checkerboard
n_corners = board_sz.width * board_sz.height

square_width = int(args[2])

source = ImagesSource(args[3:])

if options.max_boards and options.max_boards < source.n_images():
    max_boards = options.max_boards
else:
    max_boards = source.n_images()

image_points      = cvCreateMat(max_boards*n_corners,2,CV_32FC1)
object_points     = cvCreateMat(max_boards*n_corners,3,CV_32FC1)

point_counts      = cvCreateMat(max_boards,1,CV_32SC1)

intrinsic_matrix  = cvCreateMat(3,3,CV_32FC1)
distortion_coeffs = cvCreateMat(4,1,CV_32FC1)

corners           = []

successes = 0
step = 0
frame = 0

gray_image = cvCreateImage(source.images_cvSize(),8,1); # subpixel
bin_image  = cvCreateImage(source.images_cvSize(),8,1);

corner_count = 0

if options.show_images:
    cvNamedWindow("Calibration")

# Capture corner views loop
for image in source.get_images():

    cvCvtColor(image, gray_image, CV_BGR2GRAY)

    cvAdaptiveThreshold(gray_image, bin_image, 128.0,
                        CV_ADAPTIVE_THRESH_MEAN_C, CV_THRESH_BINARY, 21, 8);

    (found, corners) = cvFindChessboardCorners(bin_image, board_sz,
                                               CV_CALIB_CB_NORMALIZE_IMAGE)

    if options.show_images:
        cvDrawChessboardCorners(image, board_sz, corners, found)
        cvShowImage("Calibration", image );
        c = cvWaitKey(5)

    # If we got a good board, add it to our data
    if found:
        offset = successes*n_corners;

        #Get Subpixel accuracy on those corners
        cvFindCornerSubPix(bin_image, corners, cvSize(5, 5), cvSize(-1,-1),
                           cvTermCriteria(CV_TERMCRIT_EPS+CV_TERMCRIT_ITER,
                                          1000, 0.0001))

        step = successes*n_corners;
        for i in range(n_corners):
            image_points[offset+i][0] = corners[i].x
            image_points[offset+i][1] = corners[i].y
            object_points[offset+i][0] = i/board_sz.width * square_width
            object_points[offset+i][1] = i%board_sz.width * square_width
            object_points[offset+i][2] = 0.0

        point_counts[successes] = n_corners
        successes += 1

        if successes == max_boards:
            break

if options.show_images:
    cvDestroyWindow("Calibration")


# Allocate matrices according to how many chessboards found
object_points2 = cvCreateMat(successes*n_corners, 3, CV_32FC1);
image_points2  = cvCreateMat(successes*n_corners, 2, CV_32FC1);
point_counts2  = cvCreateMat(successes, 1, CV_32SC1);

# Transfer the points into the correct size matrices
for i in range(successes*n_corners):
    image_points2[i][0] = image_points[i][0]
    image_points2[i][1] = image_points[i][1]
    object_points2[i][0] = object_points[i][0]
    object_points2[i][1] = object_points[i][1]
    object_points2[i][2] = object_points[i][2]

for i in range(successes):
    point_counts2[i] = point_counts[i]

cvReleaseMat(object_points)
cvReleaseMat(image_points)
cvReleaseMat(point_counts)

# At this point we have all of the chessboard corners we need.
# Initialize the intrinsic matrix such that the two focal
# lengths have a ratio of 1.0
intrinsic_matrix[0][0] = 1.0
intrinsic_matrix[1][1] = 1.0

cvCalibrateCamera2(object_points2, image_points2,
                   point_counts2, cvGetSize(image),
                   intrinsic_matrix, distortion_coeffs)

# ---------------------------------------------------- Outputs the results

print("focal_length = {" + str(intrinsic_matrix[0][0]) + ", "
      + str(intrinsic_matrix[1][1]) + "},")
print("principal_point = {" + str(intrinsic_matrix[0][2]) + ", "
      + str(intrinsic_matrix[1][2]) + "},")
print("radial_coef = {" + str(distortion_coeffs[0]) + ", "
      + str(distortion_coeffs[1]) + ", 0.0},")
print("tangential_coef = {" + str(distortion_coeffs[2]) + ", "
      + str(distortion_coeffs[3]) + "},")

if options.save_xml:
    cvSave("Intrinsics.xml",intrinsic_matrix)
    cvSave("Distortion.xml",distortion_coeffs)

if options.show_images:
    mapx = cvCreateImage(source.images_cvSize(), IPL_DEPTH_32F, 1)
    mapy = cvCreateImage(source.images_cvSize(), IPL_DEPTH_32F, 1)

    cvInitUndistortMap(intrinsic_matrix, distortion_coeffs, mapx, mapy)

    cvNamedWindow("Undistort")
    for image in source.get_images():
        t = cvCreateImage(source.images_cvSize(), 8, 3)
        cvRemap(image, t, mapx, mapy)   # Undistort image
        cvShowImage("Undistort", t)     # Show corrected image

        c = cvWaitKey(0)

    cvDestroyWindow("Undistort")
