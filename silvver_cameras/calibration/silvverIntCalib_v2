#!/usr/bin/env python
#
# Copyright 2009,2010 Renato Florentino Garcia <fgar.renato@gmail.com>,
#                Daniel Balbino
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# This script works with OpenCv 2.0 series

from optparse import OptionParser
import cv
import sys
from glob import glob

class ImagesSource:
    def __init__(self, image_files):
        self._images_path = image_files
        img = cv.LoadImage(self._images_path[0], cv.CV_LOAD_IMAGE_COLOR)
        self.images_size = (img.width, img.height)

    def get_images(self):
        for path in self._images_path:
            if path.endswith(('.jpg', '.ppm', '.png')):
                yield cv.LoadImage(path, cv.CV_LOAD_IMAGE_COLOR)

    def n_images(self):
        return len(self._images_path)

description = "Receive a series of images with a checkerboard as input, "\
              "and outputs the intrinsic calibration of camera which grab "\
              "that images."
usage="%prog [options] board_width board_height square_width input_files..."
parser = OptionParser(usage=usage, description=description,
                      version="%prog 0.1")
parser.add_option("-i", "--show-images", action="store_true",
                  dest="show_images", default=False,
                  help="Show images when finding corners on input, and\
                        compare the distorted images with the undistorted.")
parser.add_option("-x", "--save-xml", action="store_true",
                  dest="save_xml", default=False,
                  help="Save an opencv xml for distortion and intrinsic\
                        values.")
parser.add_option("-m", "--maximum", type="int", dest="max_boards",
                  help="How many boards will be analyzed")

(options, args) = parser.parse_args()

# Number of internal corners
board_sz = (int(args[0])-1, int(args[1])-1)

# Number of corners in a checkerboard
n_corners = board_sz[0] * board_sz[1]

square_width = int(args[2])

source = ImagesSource(args[3:])

if options.max_boards and options.max_boards < source.n_images():
    max_boards = options.max_boards
else:
    max_boards = source.n_images()

image_points      = cv.CreateMat(max_boards*n_corners, 2, cv.CV_32FC1)
object_points     = cv.CreateMat(max_boards*n_corners, 3, cv.CV_32FC1)

point_counts      = cv.CreateMat(max_boards, 1, cv.CV_32SC1)

intrinsic_matrix  = cv.CreateMat(3, 3, cv.CV_32FC1)
distortion_coeffs = cv.CreateMat(4, 1, cv.CV_32FC1)

corners           = []

successes = 0
step = 0
frame = 0

gray_image = cv.CreateImage(source.images_size, 8, 1); # subpixel
bin_image  = cv.CreateImage(source.images_size, 8, 1);

corner_count = 0

if options.show_images:
    cv.NamedWindow("Calibration")

# Capture corner views loop
for image in source.get_images():

    cv.CvtColor(image, gray_image, cv.CV_BGR2GRAY)

    cv.AdaptiveThreshold(gray_image, bin_image, 128.0,
                         cv.CV_ADAPTIVE_THRESH_MEAN_C,
                         cv.CV_THRESH_BINARY, 21, 8);

    (found, corners) = cv.FindChessboardCorners(bin_image, board_sz,
                                                cv.CV_CALIB_CB_NORMALIZE_IMAGE)

    if options.show_images:
        cv.DrawChessboardCorners(image, board_sz, corners, found)
        cv.ShowImage("Calibration", image );
        c = cv.WaitKey(5)

    # If we got a good board, add it to our data
    if found:
        offset = successes*n_corners;

        #Get Subpixel accuracy on those corners
        cv.FindCornerSubPix(bin_image, corners, (5, 5), (-1,-1),
                            (cv.CV_TERMCRIT_EPS + cv.CV_TERMCRIT_ITER,
                             1000, 0.0001))

        step = successes*n_corners;
        for i in range(n_corners):
            image_points[offset+i,0] = corners[i][0]
            image_points[offset+i,1] = corners[i][1]
            object_points[offset+i,0] = i/board_sz[0] * square_width
            object_points[offset+i,1] = i%board_sz[0] * square_width
            object_points[offset+i,2] = 0.0

        point_counts[successes,0] = n_corners
        successes += 1

        if successes == max_boards:
            break

if options.show_images:
    cv.DestroyWindow("Calibration")


# Allocate matrices according to how many chessboards found
object_points2 = cv.CreateMat(successes*n_corners, 3, cv.CV_32FC1);
image_points2  = cv.CreateMat(successes*n_corners, 2, cv.CV_32FC1);
point_counts2  = cv.CreateMat(successes, 1, cv.CV_32SC1);

# Transfer the points into the correct size matrices
for i in range(successes*n_corners):
    image_points2[i,0] = image_points[i,0]
    image_points2[i,1] = image_points[i,1]
    object_points2[i,0] = object_points[i,0]
    object_points2[i,1] = object_points[i,1]
    object_points2[i,2] = object_points[i,2]

for i in range(successes):
    point_counts2[i,0] = point_counts[i,0]

# At this point we have all of the chessboard corners we need.
# Initialize the intrinsic matrix such that the two focal
# lengths have a ratio of 1.0
intrinsic_matrix[0,0] = 1.0
intrinsic_matrix[1,1] = 1.0

rot  = cv.CreateMat(successes, 9, cv.CV_32FC1);
tra  = cv.CreateMat(successes, 3, cv.CV_32FC1);
cv.CalibrateCamera2(object_points2, image_points2,
                    point_counts2, cv.GetSize(image),
                    intrinsic_matrix, distortion_coeffs,
                    rot, tra)

# ---------------------------------------------------- Outputs the results

print("focal_length = {" + str(intrinsic_matrix[0,0]) + ", "
      + str(intrinsic_matrix[1,1]) + "},")
print("principal_point = {" + str(intrinsic_matrix[0,2]) + ", "
      + str(intrinsic_matrix[1,2]) + "},")
print("radial_coef = {" + str(distortion_coeffs[0,0]) + ", "
      + str(distortion_coeffs[1,0]) + ", 0.0},")
print("tangential_coef = {" + str(distortion_coeffs[2,0]) + ", "
      + str(distortion_coeffs[3,0]) + "},")

if options.save_xml:
    cv.Save("Intrinsics.xml",intrinsic_matrix)
    cv.Save("Distortion.xml",distortion_coeffs)

if options.show_images:
    mapx = cv.CreateImage(source.images_size, cv.IPL_DEPTH_32F, 1)
    mapy = cv.CreateImage(source.images_size, cv.IPL_DEPTH_32F, 1)

    cv.InitUndistortMap(intrinsic_matrix, distortion_coeffs, mapx, mapy)

    cv.NamedWindow("Undistort")
    for image in source.get_images():
        t = cv.CreateImage(source.images_size, 8, 3)
        cv.Remap(image, t, mapx, mapy)   # Undistort image
        cv.ShowImage("Undistort", t)     # Show corrected image

        c = cv.WaitKey(0)

    cv.DestroyWindow("Undistort")
