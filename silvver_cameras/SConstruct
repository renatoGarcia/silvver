#!/bin/env python

import sys
sys.path.insert(0, '../common')
from sconsUtilities import *

from os.path import abspath

mandatory_libs = LibraryDict()
mandatory_libs['boost'] = Library('Boost', 'boost',
                                  ['boost/algorithm/string.hpp',
                                   'boost/archive/text_iarchive.hpp',
                                   'boost/archive/text_oarchive.hpp',
                                   'boost/array.hpp',
                                   'boost/asio.hpp',
                                   'boost/bind.hpp',
                                   'boost/foreach.hpp',
                                   'boost/lexical_cast.hpp',
                                   'boost/noncopyable.hpp',
                                   'boost/program_options.hpp',
                                   'boost/ref.hpp',
                                   'boost/scoped_ptr.hpp',
                                   'boost/serialization/variant.hpp',
                                   'boost/shared_ptr.hpp',
                                   'boost/thread/mutex.hpp',
                                   'boost/thread/once.hpp',
                                   'boost/thread/thread.hpp',
                                   'boost/tokenizer.hpp',
                                   'boost/tuple/tuple.hpp',
                                   'boost/variant.hpp'],
                                  ['boost_filesystem',
                                   'boost_program_options',
                                   'boost_thread',
                                   'boost_serialization'])
mandatory_libs['opencv'] = Library('OpenCv',
                                   'opencv',
                                   ['opencv/cv.h',
                                    'opencv/highgui.h'],
                                   ['cv',
                                    'highgui'])
mandatory_libs['lua'] = PkgConfig('Lua', 'lua',
                                  pkg_config = 'lua')

target_libs = LibraryDict()
target_libs['artkp'] = Library('ARToolKitPlus',
                               'artkp',
                               ['ARToolKitPlus/TrackerSingleMarker.h',
                                'ARToolKitPlus/TrackerSingleMarkerImpl.h'],
                               ['ARToolKitPlus'])

camera_libs = LibraryDict()

dc1394 = Conflict('DC1394', 'dc1394')
dc1394['v1'] = Library('DC1394v1',
                       'dc1394v1',
                       ['libdc1394/dc1394_control.h'],
                       ['dc1394_control'])
dc1394['v1'].description = 'Cameras conform to the IEEE 1394-based Digital '\
                           'Camera Specification'

dc1394['v2'] = Library('DC1394v2',
                       'dc1394v2',
                       ['dc1394/dc1394.h'],
                       ['dc1394'])
dc1394['v2'].description = 'Cameras conform to the IEEE 1394-based Digital '\
                           'Camera Specification'

camera_libs.add_conflict(dc1394)

#------------------------------------------------------------------

AddOption('--prefix',
          default = '/usr/local',
          dest    = 'prefix',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix')
AddOption('--exec_prefix',
          default = GetOption('prefix'),
          dest    = 'exec_prefix',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for executables and object '
                    'code libraries')
AddOption('--bindir',
          default = GetOption('exec_prefix')+'/bin',
          dest    = 'bindir',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for user executables')
AddOption('--datadir',
          default = GetOption('prefix')+'/share',
          dest    = 'datadir',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for machine-independent data')
AddOption('--lualibdir',
          default = GetOption('datadir')+'/lua/5.1',
          dest    = 'lualibdir',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for lua libraries')
AddOption('--docdir',
          default = GetOption('datadir')+'/doc',
          dest    = 'docdir',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for documentation')

mandatory_libs.add_options(AddOption)
target_libs.add_options(AddOption)
camera_libs.add_options(AddOption)

var = Variables()

env = Environment(variables = var)
for name,value in var.UnknownVariables().iteritems():
    env[name] = value

try:
    env['CPPPATH'] = env['CPPPATH'].split(';')
except:
    pass
env.Append(CPPPATH = [abspath('../common')])
try:
    env['LIBPATH'] = env['LIBPATH'].split(';')
except:
    pass

if not env.GetOption('clean') and not env.GetOption('help'):
    conf = Configure(env)

    print '\n' + 'Mandatory libraries...'
    if not mandatory_libs.check_libs(conf):
        exit(1)
    if not target_libs.check_libs(conf):
        exit(1)

    print '\n' + 'Optional libraries...'
    camera_libs.check_libs(conf)

    env = conf.Finish()

print
print 'Supported cameras:'
print '  * Pseudocameras'
for camera in camera_libs.itervalues():
    if camera:
        print '  * ' + camera.description
print

install_nodes = []
install_nodes.append(env.Install(GetOption('lualibdir'),
                                 ['lua/cameraId.lua',
                                  'lua/cameraConstructors.lua']))
install_nodes.append(env.Install(GetOption('bindir'),
                                 ['calibration/silvverExtCalib',
                                  'calibration/silvverIntCalib']))

Export('env', 'install_nodes', 'camera_libs')
SConscript('src/SConscript', build_dir='build', duplicate=0)

env.Alias('install', install_nodes)
