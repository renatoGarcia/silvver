#!/bin/env python

import sys
sys.path.insert(0, '../common')
from sconsUtilities import *

from os.path import abspath

boost_libs = RelatedLibs('Boost',
                         'boost',
                         ['boost_serialization',
                          'boost_system',
                          'boost_thread'])

mandatory_libs = RelatedLibsGroup([boost_libs])

vars = Variables()

vars.AddVariables(
    PathVariable('prefix',
               'Installation prefix',
               '/usr/local', PathVariable.PathAccept),
    PathVariable('exec_prefix',
                 'Installation prefix for executables and object code libraries',
                 '$prefix', PathVariable.PathAccept),
    PathVariable('datadir',
               'Installation prefix for machine-independent data',
               '$prefix/share', PathVariable.PathAccept),
    PathVariable('docdir',
               'Installation prefix for documentation',
               '$datadir/doc', PathVariable.PathAccept),
    PathVariable('libdir',
               'Installation prefix for object code libraries',
               '$exec_prefix/lib', PathVariable.PathAccept),
    PathVariable('includedir',
               'Installation prefix for C header files',
               '$prefix/include', PathVariable.PathAccept))

for related_libs in mandatory_libs:
    vars.Add('lib_' + related_libs.short_name + '_suffix',
             'Suffix of ' + related_libs.long_name + ' libraries.',
             '')

vars.Add('CPPPATH',
         'Directories that the C++ preprocessor will search for '
         'include directories. List only directories, do not list '
         'options flags like -I in gcc. Multiples directories must be '
         'quoted and delimited by a semicolon',
         '')

vars.Add('LIBPATH',
         'The list of directories that will be searched for libraries. '
         'List only directories, do not list options flags like -L in '
         'gcc. Multiples directories must be quoted and delimited by '
         'a semicolon',
         '')

vars.Add('CPPFLAGS',
         'C++ preprocessor flags',
         '')

env = Environment(options = vars,
                  CPPFLAGS = '${CPPFLAGS}')

for related_libs in mandatory_libs:
    related_libs.add_suffix(env['lib_' + related_libs.short_name + '_suffix'])

env['CPPPATH'] = env['CPPPATH'].split(';')
env.Append(CPPPATH = [abspath('../common')])

env['LIBPATH'] = env['LIBPATH'].split(';')

Help(vars.GenerateHelpText(env))

if not env.GetOption('clean') and not env.GetOption('help'):
#=======================================================
#==== System Configuration
#=======================================================

    conf = Configure(env)
#-------------------------------------------------------
    print '\n' + 'Mandatory libraries...'
#-------------------------------------------------------
    for related_libs in mandatory_libs:
        for lib in related_libs:
            if not conf.CheckLib(lib):
                print 'Did not find', lib, 'library'
                exit(1)

#-------------------------------------------------------
    print '\n' + 'Mandatory headers...'
#-------------------------------------------------------
    headers = ['boost/archive/text_iarchive.hpp',
               'boost/archive/text_oarchive.hpp',
               'boost/asio/buffer.hpp',
               'boost/asio/ip/tcp.hpp',
               'boost/asio/ip/udp.hpp',
               'boost/asio/placeholders.hpp',
               'boost/asio/read.hpp',
               'boost/asio/write.hpp',
               'boost/bind.hpp',
               'boost/lexical_cast.hpp',
               'boost/ref.hpp',
               'boost/scoped_ptr.hpp',
               'boost/thread/mutex.hpp',
               'boost/thread/once.hpp',
               'boost/thread/thread.hpp',
               'boost/tuple/tuple.hpp']

    for header in headers:
        if not conf.CheckCXXHeader(header):
            print 'Did not find the', header, 'header.'
            exit(1)

    print

    env = conf.Finish()

install_nodes = []

install_nodes.append(env.Install(env['includedir'] + '/silver',
                                 ['src/target.hpp',
                                  '../common/silverTypes.hpp',
                                  '../common/serializations.hpp']))

install_nodes.append(env.Install(env['docdir'] + '/silvver_client',
                                 ['doc/silver_client.cpp',
                                  'doc/Makefile']))

Export('env', 'install_nodes')
SConscript('./src/SConscript', build_dir='./build', duplicate=0)

env.Alias('install', install_nodes)
