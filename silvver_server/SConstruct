#!/bin/env python

import sys
sys.path.insert(0, '../common')
from sconsUtilities import *

from string import maketrans
from os.path import abspath

mandatory_libs = LibraryDict()
mandatory_libs['boost'] = Library('Boost',
                                  'boost',
                                  ['boost/archive/text_iarchive.hpp',
                                   'boost/archive/text_oarchive.hpp',
                                   'boost/asio.hpp',
                                   'boost/bind.hpp',
                                   'boost/enable_shared_from_this.hpp',
                                   'boost/foreach.hpp',
                                   'boost/lexical_cast.hpp',
                                   'boost/program_options.hpp',
                                   'boost/ref.hpp',
                                   'boost/scoped_ptr.hpp',
                                   'boost/serialization/vector.hpp',
                                   'boost/shared_ptr.hpp',
                                   'boost/system/system_error.hpp',
                                   'boost/thread.hpp',
                                   'boost/thread/mutex.hpp',
                                   'boost/thread/thread.hpp',
                                   'boost/tuple/tuple.hpp'],
                                  ['boost_program_options',
                                   'boost_serialization',
                                   'boost_system',
                                   'boost_thread'])

#------------------------------------------------------------------

AddOption('--prefix',
          default = '/usr/local',
          dest    = 'prefix',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix')
AddOption('--exec_prefix',
          default = GetOption('prefix'),
          dest    = 'exec_prefix',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for executables and object '
                    'code libraries')
AddOption('--bindir',
          default = GetOption('exec_prefix')+'/bin',
          dest    = 'bindir',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for user executables')
AddOption('--datadir',
          default = GetOption('prefix')+'/share',
          dest    = 'datadir',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for machine-independent data')
AddOption('--docdir',
          default = GetOption('datadir')+'/doc',
          dest    = 'docdir',
          nargs   = 1,
          type    = 'string',
          action  = 'store',
          metavar = 'DIR',
          help    = 'Installation prefix for documentation')

mandatory_libs.add_options(AddOption)

var = Variables()

env = Environment(variables = var)
for name,value in var.UnknownVariables().iteritems():
    env[name] = value

try:
    env['CPPPATH'] = env['CPPPATH'].split(';')
except:
    pass
env.Append(CPPPATH = [abspath('../common')])
try:
    env['LIBPATH'] = env['LIBPATH'].split(';')
except:
    pass

if not env.GetOption('clean') and not env.GetOption('help'):
    conf = Configure(env)

    print '\n' + 'Mandatory libraries...'
    if not mandatory_libs.check_libs(conf):
        exit(1)
    print

    env = conf.Finish()

install_nodes = []

Export('env', 'install_nodes')
SConscript('src/SConscript', build_dir='build', duplicate=0)

env.Alias('install', install_nodes)
